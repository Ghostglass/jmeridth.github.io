<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Jason Meridth's Blog (books)</title><link>http://blog.jasonmeridth.com/</link><description></description><atom:link href="http://blog.jasonmeridth.com/categories/books.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 10 Mar 2014 19:37:12 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>"Pro Git" Cliff Notes</title><link>http://blog.jasonmeridth.com/posts/pro-git-cliff-notes/</link><description>&lt;div&gt;&lt;p&gt;These are my notes from reading Scott Chacon’s &lt;a href="http://progit.org/book"&gt;Pro Git&lt;/a&gt; I highly suggest &lt;a href="http://tinyurl.com/amazonprogit"&gt;buying this book&lt;/a&gt; if you are serious about using the Git version control tool. &lt;a href="http://progit.org/book/ch3-1.html"&gt;pg 48&lt;/a&gt; A branch in Git is simply a lightweight movable pointer &lt;a href="http://progit.org/book/ch3-1.html"&gt;pg 50&lt;/a&gt; a special pointer called HEAD…is a pointer to the local branch you’re currently on &lt;a href="http://progit.org/book/ch3-1.html"&gt;pg 52&lt;/a&gt; Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline). &lt;a href="http://progit.org/book/ch3-2.html"&gt;pg 53&lt;/a&gt; To create a branch and switch to it at the same time…git checkout command with the -b switch &lt;a href="http://progit.org/book/ch3-3.html"&gt;pg 61&lt;/a&gt; To see the last commit on each branch, you can run git branch -v &lt;a href="http://progit.org/book/ch3-5.html"&gt;pg 69&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git checkout -b &lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;remotename&lt;span class="o"&gt;]&lt;/span&gt;/&lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is the same as &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git checkout --track &lt;span class="o"&gt;[&lt;/span&gt;remotename&lt;span class="o"&gt;]&lt;/span&gt;/&lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch4-1.html"&gt;pg 81&lt;/a&gt; Git protocol…listens on a dedicated port (9418) &lt;/p&gt;
&lt;p&gt;&lt;a href="http://progit.org/book/ch4-1.html"&gt;pg 82&lt;/a&gt; The Git protocol is the fastst transfer protocol available. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://progit.org/book/ch5-2.html"&gt;pg 111&lt;/a&gt; The Git project provides a document that lays out a number of good tips for creating commits from which to submit patches—you can read it in the Git source code in the Documentation/SubmittingPatches file. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://progit.org/book/ch5-2.html"&gt;pg 116&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log --no-merges origin/master ^issue54
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch5-2.html"&gt;pg 121&lt;/a&gt; Compare origin changes with local changes before merging: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log origin/featureA ^feature
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch5-2.html"&gt;pg 126&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git merge --no-commit --squash featureB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 130&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git apply
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It’s almost identical to running a patch -p1 command to apply the patch, although it’s more paranoid and accepts fewer fuzzy matches then patch. &lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 131&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git apply --check
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;check to see if a patch applies cleanly before you try actually applying it &lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 134&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log contrib --not master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To find common ancestor of both branches &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git merge-base contrib master
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="code"&gt;&lt;pre&gt;git diff &lt;span class="o"&gt;[&lt;/span&gt;sha1 from previous &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 135&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git diff master...topic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shows you only the work your topic branch has introduced since its common ancestor with master. &lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 140&lt;/a&gt; tagging releases with signed keys &lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 141&lt;/a&gt; generating a build number with your tags preparing a release as a tarball &lt;a href="http://progit.org/book/ch5-3.html"&gt;pg 142&lt;/a&gt; Show work by author since a specific time &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git shortlog --no-merges master --not v1.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch6-1.html"&gt;pg 144&lt;/a&gt; Git can figure out a short, unique abbreviation for your SHA-1 values &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log --abbrev-commit --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;wolves paragraph &lt;a href="http://progit.org/book/ch6-1.html"&gt;pg 145&lt;/a&gt; Find out the SHA1 of a branch &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git rev-parse &lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch6-1.html"&gt;pg 146&lt;/a&gt; To see reflog information inline with your normal log information &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log -g master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because reflog is a log, it will show you where the HEAD pointer was 2 months ago – if the repo is older than that &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git show HEAD@&lt;span class="o"&gt;{&lt;/span&gt;2.months.ago&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch6-1.html"&gt;pg 147&lt;/a&gt; ^ is the first parent of the current commit ^2 is the second parent of the current commit (only works if the current commit is a merge commit, where first parent is the branch you on when you merged, second was the other) ~ is the first parent ~2 (or any number) is the grandparent(s) of the current commit only on the current branch or branch you were on when you merged &lt;a href="http://progit.org/book/ch6-1.html"&gt;pg 148&lt;/a&gt; Shows you any commits in your current branch that aren’t in the master branch on your origin remote &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log origin/master..HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Git substitutes HEAD if one side is missing (git log origin/master..) Just like above command and example shown on pg134 &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git log refB --not refA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch6-3.html"&gt;pg 155&lt;/a&gt; Tells the stash command to try to reapply the staged changes &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git stash apply --index
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch6-3.html"&gt;pg 156&lt;/a&gt; Create a branch from a stash, testchanges &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git stash branch testchanges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch6-4.html"&gt;pg 157&lt;/a&gt; …don’t amend your last commit if you’ve already pushed it (git commit —amend command) &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git rebase -i HEAD~3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don’t include any commit you’ve already pushed to a central server—doing so will confuse other developers by providing an alternate version of the same change &lt;a href="http://progit.org/book/ch6-4.html"&gt;pg 158&lt;/a&gt; It’s important to note that these commits (interactive rebase) are listed in the opposite order (oldest first, newest last) than you normally see then using the log command (newest first). &lt;a href="http://progit.org/book/ch6-4.html"&gt;pg 160&lt;/a&gt; …make sure no commit shows up in that list (git log -4 —pretty=format:“%h %s”) that you’ve already pushed to a shared repository &lt;a href="http://progit.org/book/ch6-5.html"&gt;pg 164&lt;/a&gt; was wondering how to automate the good/bad declaration &lt;a href="http://progit.org/book/ch6-6.html"&gt;pg 168&lt;/a&gt; git submodule update You have to do this every time you pull down a submodule change in the main projects. It’s strange, but it works. &lt;a href="http://progit.org/book/ch6-7.html"&gt;pg 172 (subtree merging)&lt;/a&gt; You want to pull the Rack project into your master project as a subdirectory &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git &lt;span class="nb"&gt;read&lt;/span&gt;-tree --prefix&lt;span class="o"&gt;=&lt;/span&gt;rack/ -u rack_branch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://progit.org/book/ch7-1.html"&gt;pg 175&lt;/a&gt; global git config /etc/gitconfig user global git config ~/.gitconfig local repository git config .git/config &lt;a href="http://progit.org/book/ch7-1.html"&gt;pg 182&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git config --global core.autocrlf input
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This setup should leave you with CRLF endings in Windows checkouts but LF endings on Mac and Linux systems and in the repository &lt;a href="http://progit.org/book/ch7-2.html"&gt;pg 184&lt;/a&gt; To tell Git to treat a specific file as binary data, add the following line to your .gitattributes file: *.extension -crlf -diff &lt;a href="http://progit.org/book/ch7-2.html"&gt;pg 185&lt;/a&gt; …one of the most annoying problems known to humanity: version-controlling Word documents (LOL) &lt;a href="http://progit.org/book/ch7-3.html"&gt;pg 192&lt;/a&gt; post-receive hook…This scripts can’t stop the push process, but the client doesn’t disconnect until it has completed; so, be careful when you try to do anything that may take a long time &lt;a href="http://progit.org/book/ch7-4.html"&gt;pg 194&lt;/a&gt; Is practically the git log command…it prints out only the SHA-1 values and no other information &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git rev-list &lt;span class="o"&gt;[&lt;/span&gt;SHA-1&lt;span class="o"&gt;]&lt;/span&gt;..&lt;span class="o"&gt;[&lt;/span&gt;SHA-1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get the commit message from each of these commits to test git cat-file commit [SHA-1] Incantation: &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git cat-file commit &lt;span class="o"&gt;[&lt;/span&gt;SHA-1&lt;span class="o"&gt;]&lt;/span&gt; | sed &lt;span class="s1"&gt;'1,/^$/d'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.jasonmeridth.com/posts/pro-git-cliff-notes/#471" title="2010-04-14 01:04:47"&gt;Ricardo&lt;/a&gt;:&lt;/strong&gt; Thanks for the compilation!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.jasonmeridth.com/posts/pro-git-cliff-notes/#472" title="2010-04-14 01:25:01"&gt;Jason Meridth&lt;/a&gt;:&lt;/strong&gt; Ricardo: You're welcome&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.jasonmeridth.com/posts/pro-git-cliff-notes/#473" title="2010-05-10 03:55:33"&gt;Simon&lt;/a&gt;:&lt;/strong&gt; You've convinced me to buy this book now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.jasonmeridth.com/posts/pro-git-cliff-notes/#474" title="2010-05-12 12:59:43"&gt;Jason Meridth&lt;/a&gt;:&lt;/strong&gt; @Simon: Awesome. It's worth it's weight in gold.&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>books</category><guid>http://blog.jasonmeridth.com/posts/pro-git-cliff-notes/</guid><pubDate>Mon, 05 Apr 2010 09:17:00 GMT</pubDate></item></channel></rss>