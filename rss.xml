<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Jason Meridth's Blog</title><link>http://blog.jasonmeridth.com/</link><description>Learn, Converse, Share</description><language>en</language><lastBuildDate>Fri, 08 Aug 2014 16:00:49 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Weechat keyboard shortcuts</title><link>http://blog.jasonmeridth.com/posts/weechat-keyboard-shortcuts/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I've switched from using irssi to &lt;a href="http://weechat.org"&gt;Weechat&lt;/a&gt; since I rejoined the ranks as a &lt;a href="http://www.rackspace.com"&gt;Racker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jmeridth/dotfiles/blob/master/weechat.conf"&gt;Here&lt;/a&gt; is my current weechat.conf file&lt;/p&gt;
&lt;p&gt;Some of the ones I use often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+h - window left&lt;/li&gt;
&lt;li&gt;ctrl+j - window down&lt;/li&gt;
&lt;li&gt;ctrl+k - window up&lt;/li&gt;
&lt;li&gt;ctrl+l - window right&lt;/li&gt;
&lt;li&gt;ctrl+z - window zoom (make current small window full screen)&lt;/li&gt;
&lt;li&gt;ctrl+n - next buffer&lt;/li&gt;
&lt;li&gt;ctrl+p - previous buffer&lt;/li&gt;
&lt;li&gt;ctrl+y - clipboard paste&lt;/li&gt;
&lt;li&gt;ctrl+r - search&lt;/li&gt;
&lt;li&gt;ctrl+[j|m] - stop search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;normal commands not included with my weechat.conf that I use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/window resize &lt;number&gt; - resizes window to that percentage&lt;/number&gt;&lt;/li&gt;
&lt;li&gt;/buffer clear - clears the buffer, i use this often with the &lt;a href="http://weechat.org/scripts/source/highmon.pl.html/"&gt;highlight monitor plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;/buffer merge &lt;other buffer number&gt; - merges two buffers into one (use ctrl+x to switch between them)&lt;/other&gt;&lt;/li&gt;
&lt;li&gt;/buffer unmerge - unmerge the buffer you're currently on out to its own&lt;/li&gt;
&lt;/ul&gt;</description><category>cli</category><category>irc</category><category>weechat</category><guid>http://blog.jasonmeridth.com/posts/weechat-keyboard-shortcuts/</guid><pubDate>Sat, 15 Mar 2014 04:52:39 GMT</pubDate></item><item><title>Where I Go To Choose An Open Source License</title><link>http://blog.jasonmeridth.com/posts/where-i-go-to-choose-an-open-source-license/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I go to &lt;a href="http://choosealicense.com"&gt;choosealicense.com&lt;/a&gt; to refresh my memory on open source licenses.  &lt;a href="http://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt; is usually my favorite.&lt;/p&gt;
&lt;p&gt;A good resource, in my opinion&lt;/p&gt;</description><category>open source</category><category>resources</category><guid>http://blog.jasonmeridth.com/posts/where-i-go-to-choose-an-open-source-license/</guid><pubDate>Sat, 15 Mar 2014 04:50:13 GMT</pubDate></item><item><title>How to Get The SHA of The Last Commit on a Branch With Git</title><link>http://blog.jasonmeridth.com/posts/how-to-get-the-sha-of-the-last-commit-on-a-branch-with-git/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I've been asked this a few times and have had to do it lately a few times.&lt;/p&gt;
&lt;p&gt;To get the SHA of the last commit from a specific branch, use &lt;a href="http://git-scm.com/docs/git-rev-parse"&gt;&lt;code&gt;git rev-parse&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rev-parse origin/master&lt;/code&gt; (remote branch)&lt;/p&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rev-parse master&lt;/code&gt; (local branch)&lt;/p&gt;</description><category>git</category><guid>http://blog.jasonmeridth.com/posts/how-to-get-the-sha-of-the-last-commit-on-a-branch-with-git/</guid><pubDate>Tue, 11 Mar 2014 07:30:23 GMT</pubDate></item><item><title>How to Run a Single Test With Tox</title><link>http://blog.jasonmeridth.com/posts/how-to-run-a-single-test-with-tox/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I have to run a single python test once in a while and keep forgetting how to do it with Tox.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;tox -e py27 -- project_name_here.tests.folder_name1_here.folder_name2_here.test_file_name_here.TestClassName.test_method_name
&lt;/pre&gt;


&lt;p&gt;Hope this helps someone else.&lt;/p&gt;
&lt;p&gt;Happy bit twiddling.&lt;/p&gt;</description><category>cli</category><category>python</category><category>testing</category><guid>http://blog.jasonmeridth.com/posts/how-to-run-a-single-test-with-tox/</guid><pubDate>Fri, 07 Mar 2014 10:49:53 GMT</pubDate></item><item><title>Personal VIM Cheatsheet</title><link>http://blog.jasonmeridth.com/posts/personal-vim-cheatsheet/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;Will be adding to this post as I learn/remember shortcuts&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; - repeat last command in normal mode&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@:&lt;/code&gt; then &lt;code&gt;@@&lt;/code&gt; - repeat last command entered with &lt;code&gt;:&lt;/code&gt; &lt;a href="http://vim.wikia.com/wiki/Repeat_last_colon_command"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; - find all occurances of the word I'm currently on&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+v [h|j|k|l]&lt;/code&gt; - highlight indeividual items (great for highlighting column(s)&lt;/p&gt;</description><category>cli</category><category>vim</category><guid>http://blog.jasonmeridth.com/posts/personal-vim-cheatsheet/</guid><pubDate>Mon, 03 Mar 2014 22:21:02 GMT</pubDate></item><item><title>Using sed and regex to Remove Prefix on Filenames</title><link>http://blog.jasonmeridth.com/posts/using-sed-and-regex-to-remove-prefix-on-filenames/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I used &lt;a href="https://github.com/dreikanter/wp2md"&gt;wp2md&lt;/a&gt; recently to generate &lt;a href="http://daringfireball.net/projects/markdown/"&gt;markdown&lt;/a&gt; files out of my wordpress posts so that I could migrate to a static blog generator (like &lt;a href="http://getnikola.com"&gt;Nikola&lt;/a&gt;, the one I chose to use on this blog).  However, this exported the files with a prefixing datetime stamp (e.g., 20140224-blog-title.md)&lt;/p&gt;
&lt;p&gt;I have used &lt;a href="http://www.gnu.org/software/sed/manual/sed.html"&gt;sed&lt;/a&gt; many times from my command line toolbox to rename files or content inside of files.  Here is how I removed the prefixing datetime stamp from my filenames.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;for &lt;/span&gt;f in *.md; &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt; | sed -r &lt;span class="s1"&gt;'s/.*(\d*)-(.*\.md)/\2/'&lt;/span&gt;; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;the for loop iterates over just my mardown files (files with the md extension)&lt;/li&gt;
&lt;li&gt;I echo out the filename into the sed command line tool via a pipe, you can send the results of one command to the input of another by piping them together (e.e., command1 | command2)&lt;/li&gt;
&lt;li&gt;Then I setup the regex s/old_string/new_string/&lt;ul&gt;
&lt;li&gt;I've learned when using group matching (the sections in the parenthses) and trying to replace the old_string with an entirely new string, you need to start the old_string with .*.  This causes the entire line to be replaced with the contents of the new string&lt;/li&gt;
&lt;li&gt;old_string regex&lt;ul&gt;
&lt;li&gt;(\d*) - first group match - any digit, 1 or more times&lt;/li&gt;
&lt;li&gt;"-" - a hyphen separating the match groups&lt;/li&gt;
&lt;li&gt;(.*.md) - second group match - anything, ending in .md&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;new_string regex&lt;ul&gt;
&lt;li&gt;\2 - replace the entire old string with the contents of the second group match&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;20140224-test-driven-development.md&lt;/code&gt; becomes &lt;code&gt;test-driven-development.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;NB: the ; do and ; done are just bash scripting loop notation when put onto one line.  This script could have also been written as&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;for &lt;/span&gt;f in *.md; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt; | sed -r &lt;span class="s1"&gt;'s/.*(\d*)-(.*\.md)/\2/'&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;I am aware that &lt;a href="http://getnikola.com"&gt;Nikola&lt;/a&gt; has a &lt;a href="http://getnikola.com/handbook.html#importing-your-wordpress-site-into-nikola"&gt;wordpress importer&lt;/a&gt;, but it imports the files to &lt;em&gt;.wp and &lt;/em&gt;.meta.  I wanted &lt;a href="http://daringfireball.net/projects/markdown/"&gt;markdown&lt;/a&gt; files (*.md)&lt;/p&gt;
&lt;p&gt;NB: I also use &lt;a href="http://rubular.com"&gt;Rubular.com&lt;/a&gt; all the time to test out my regex expressions.  You should check it out.&lt;/p&gt;</description><category>command line</category><guid>http://blog.jasonmeridth.com/posts/using-sed-and-regex-to-remove-prefix-on-filenames/</guid><pubDate>Tue, 25 Feb 2014 03:39:00 GMT</pubDate></item><item><title>Consolidated My Blogs</title><link>http://blog.jasonmeridth.com/posts/consolidated-my-blogs/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I finally consolidate my blogs that were located at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jason.lostechies.com"&gt;http://jason.lostechies.com&lt;/a&gt; - old posts&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jasonmeridth.com"&gt;http://blog.jasonmeridth.com&lt;/a&gt; - current posts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and unified them here.  I also decided to move to &lt;a href="http://getnikola.com"&gt;Nikola&lt;/a&gt; since I'm coding in Python full-time now and it is a nice Python Static Site Generator.  New posts and theme changes coming soon.&lt;/p&gt;</description><category>notification</category><guid>http://blog.jasonmeridth.com/posts/consolidated-my-blogs/</guid><pubDate>Mon, 24 Feb 2014 11:43:14 GMT</pubDate></item><item><title>Using Deafult Scope and Unscoped in Rails</title><link>http://blog.jasonmeridth.com/posts/using-default-scope-and-unscoped-in-rails/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;I recently had the need to add a deleted flag to a model in a Rails project. I am usually of the mindset “explicit over implicit” so whenever I needed to use a finder to get content for that model I would do something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;That does lean towards not having DRY (don’t repeat yourself) code. It’s a balancing act. I decided to give default_scope a chance this time. I quickly experienced the downside of that choice. I added the default_scope to my model:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;default_scope&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Well, I needed to write a migration to add the column and then update any existing records to have a default value of false. I generated my migration and added the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddDeletedFlagToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:deleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt; &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_all&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"deleted = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;However, when I looked at the database, none of the pre-existing records had false as their deleted flag. I went to the rails console and typed in the update_all command again:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_all&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"deleted = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;and that’s when I saw how default_scope can bite you in the butt:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;~/code/project&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; &amp;amp;gt; rails c
Loading development environment &lt;span class="o"&gt;(&lt;/span&gt;Rails 3.2.12&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt; User.update_all &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"deleted = ?"&lt;/span&gt;, &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  SQL &lt;span class="o"&gt;(&lt;/span&gt;35.9ms&lt;span class="o"&gt;)&lt;/span&gt;  UPDATE &lt;span class="s2"&gt;"users"&lt;/span&gt; SET &lt;span class="nv"&gt;deleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'f'&lt;/span&gt; WHERE &lt;span class="s2"&gt;"users"&lt;/span&gt;.&lt;span class="s2"&gt;"deleted"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'f'&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; 0
&lt;/pre&gt;


&lt;p&gt;Notice the &lt;code&gt;WHERE&lt;/code&gt; clause. That is what the default_scope adds automatically. Duh!! So in order to bypass the default_scope I had to use &lt;code&gt;unscoped&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unscoped&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_all&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"deleted = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;in my migration. That then caused all existing records to be updated.&lt;/p&gt;
&lt;p&gt;Yes, I’m aware this violates “Explicit over implicit” but it does keep my code “DRY (do not repeat yourself)”. There are pros and cons to all tools. Use them wisely.  &lt;/p&gt;</description><category>rails</category><guid>http://blog.jasonmeridth.com/posts/using-default-scope-and-unscoped-in-rails/</guid><pubDate>Tue, 02 Apr 2013 05:00:00 GMT</pubDate></item><item><title>Fix Rendering With Presence of Doctype</title><link>http://blog.jasonmeridth.com/posts/fix-rendering-with-presence-of-doctype/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;A couple times now I’ve forgotten to render the DOCTYPE in my layouts on my web apps. The DOCTYPE element tells the browser what type of file to expect. It needs to be the first line in your document, so it usually goes in your application layout file.&lt;/p&gt;
&lt;p&gt;In HTML or ERB:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In &lt;a href="http://haml.info"&gt;HAML&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;!!! 5
&lt;/pre&gt;


&lt;p&gt;Other &lt;a href="http://haml.info/docs/yardoc/file.REFERENCE.html#doctype_"&gt;HAML Doctypes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above is the format for HTML 5. I don’t bother with the &lt;a href="http://www.w3schools.com/tags/tag_doctype.asp"&gt;HTML 4.01 DOCTYPEs&lt;/a&gt;&lt;/p&gt;</description><category>haml</category><category>html5</category><guid>http://blog.jasonmeridth.com/posts/fix-rendering-with-presence-of-doctype/</guid><pubDate>Sun, 31 Mar 2013 05:00:00 GMT</pubDate></item><item><title>Run a Specific RSpec Spec</title><link>http://blog.jasonmeridth.com/posts/run-a-specific-rspec-spec/</link><dc:creator>Jason Meridth</dc:creator><description>&lt;p&gt;Tired of looking this up and want to use my writing part of my brain to blog it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;rake spec &lt;span class="nv"&gt;SPEC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;spec/controllers/sessions_controller_spec.rb &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;SPEC_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-e \"should log in with cookie\""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This is importatnt to me while coding Rails because if I just run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;rspec specs/controllers/sessions_controller_spec.rb
&lt;/pre&gt;


&lt;p&gt;the test database isn’t cleared out. By running &lt;code&gt;rake spec&lt;/code&gt; I get that.  &lt;/p&gt;</description><category>rspec</category><category>testing</category><category>tools</category><guid>http://blog.jasonmeridth.com/posts/run-a-specific-rspec-spec/</guid><pubDate>Sat, 23 Mar 2013 05:00:00 GMT</pubDate></item></channel></rss>